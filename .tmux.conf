# $Id: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 5
bind > resize-pane -R 5
bind - resize-pane -D 3
bind + resize-pane -U 3

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style key bindings in copy and selection modes.
setw -g mode-keys vi

# vi-style key bindings for command prompt in the status line.
set -g status-keys vi

# $Id: vim-keys.conf, End $

# set TERM env var to 256 color terminal.
set -g default-terminal "screen-256color"

# set max scrollback history lines.
set -g history-limit 65536

# enlarge the status line messages and other on-screen indicators display time. (default 750 ms)
set -g display-time 3000

# set window and pane index to 1. (default 0)
set -g base-index 1
setw -g pane-base-index 1

# shorten command delay. (default 500 ms)
set -sg escape-time 0

# enable focus events for terminals that supported them,
# and passed through to applications running in tmux.
set -g focus-events on

# super useful when using "grouped sessions" and multi-monitor setup.
setw -g aggressive-resize on

# set prefix-r to reload ~/.tmux.conf.
bind r source-file ~/.tmux.conf \; display ".tmux.conf reloaded!"

# set prefix-v to begin selection as in Vim.
bind -t vi-copy v begin-selection

# set prefix-y to copy selection as in Vim.
bind -t vi-copy y copy-selection

# set pane board colors for active and inactive panes.
set -g pane-border-fg colour235
set -g pane-active-border-fg colour240

# Monitor and highlight the window activity in the status line.
setw -g monitor-activity on
#set -g visual-activity on

# auto window rename.
#setw -g automatic-rename

# set status line position. [top|bottom] (default: bottom)
#set -g status-position top
set -g status-position bottom

# set status line colors.
set -g status-bg colour235
set -g status-fg yellow
set -g status-attr dim

# set inactive window list colors in the status line.
setw -g window-status-fg brightblue
setw -g window-status-bg colour237
setw -g window-status-attr dim

# set active window list colors in the status line.
setw -g window-status-current-fg brightcyan
setw -g window-status-current-bg colour237
setw -g window-status-current-attr bright

# status line - right side.
set -g status-right-length 50
set -g status-right " #h"

# status line - left side.
set -g status-left-length 50
set -g status-left "[#S] [#I:#P] "

# Make new window/pane keep in the same path as the current pane.
# Required tmux version >= 1.9 to support current pane splitting paths.
# Ref: https://github.com/edkolev/dots/blob/master/tmux.conf
if-shell '[[ "$(tmux -V)" = "$(echo -e "$(tmux -V)\n1.9" | sort -rV | head -n1)" ]]' 'unbind c; bind c new-window -c "#{pane_current_path}"'
if-shell '[[ "$(tmux -V)" = "$(echo -e "$(tmux -V)\n1.9" | sort -rV | head -n1)" ]]' "unbind '\"'; bind '\"' split-window -v -c '#{pane_current_path}'"
if-shell '[[ "$(tmux -V)" = "$(echo -e "$(tmux -V)\n1.9" | sort -rV | head -n1)" ]]' 'unbind %; bind % split-window -h -c "#{pane_current_path}"'
if-shell '[[ "$(tmux -V)" = "$(echo -e "$(tmux -V)\n1.9" | sort -rV | head -n1)" ]]' 'unbind s; bind s split-window -v -c "#{pane_current_path}"'
if-shell '[[ "$(tmux -V)" = "$(echo -e "$(tmux -V)\n1.9" | sort -rV | head -n1)" ]]' 'unbind v; bind v split-window -h -c "#{pane_current_path}"'

# Smart pane switching with awareness of vim splits
# (The key bindings must be synced with vim plugin 'vim-tmux-navigator')
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind h if-shell "$is_vim" "send-keys C-b \; send-keys C-h" "select-pane -L"
bind j if-shell "$is_vim" "send-keys C-b \; send-keys C-j" "select-pane -D"
bind k if-shell "$is_vim" "send-keys C-b \; send-keys C-k" "select-pane -U"
bind l if-shell "$is_vim" "send-keys C-b \; send-keys C-l" "select-pane -R"
bind \ if-shell "$is_vim" "send-keys C-b \; send-keys C-\\" "select-pane -l"
